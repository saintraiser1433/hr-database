// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//ENUMS
enum ApplicationStatus {
  PENDING
  ONGOING
  APPROVED
  REJECTED
}

enum EvaluationStatus {
  NOT_SET
  ONGOING
  FINISHED
}

//END OF ENUMS
model User {
  id           String   @id @default(cuid())
  first_name   String   @db.VarChar(100)
  last_name    String   @db.VarChar(100)
  middle_name  String   @db.VarChar(100)
  email        String?  @unique @db.VarChar(100)
  username     String   @unique @db.VarChar(100)
  password     String   @db.VarChar(100)
  accessToken  String?
  refreshToken String?
  role         String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Requirements {
  id          Int      @id @default(autoincrement())
  title       String   @unique @db.VarChar(100)
  status      Boolean? @default(true) @db.Boolean
  description String
  Job         Job?     @relation(fields: [jobId], references: [id])
  jobId       Int?
}

model Job {
  id             Int            @id @default(autoincrement())
  title          String         @unique @db.VarChar(250)
  description    String
  totalAvailable Int            @db.Integer
  departmentsId  Int
  department     Departments    @relation(fields: [departmentsId], references: [id])
  status         Boolean?       @default(true) @db.Boolean
  headerImage    String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  JobScreening   JobScreening[]
  Applicants     Applicant[]
  Requirements   Requirements[]
}

model Screening {
  id           Int            @id @default(autoincrement())
  title        String         @unique @db.VarChar(250)
  description  String
  status       Boolean?       @default(true) @db.Boolean
  JobScreening JobScreening[]
}

model JobScreening {
  id              Int       @id @default(autoincrement())
  jobList         Job       @relation(fields: [job_id], references: [id])
  job_id          Int
  screeningList   Screening @relation(fields: [screening_id], references: [id])
  screening_id    Int
  sequence_number Int
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@unique([job_id, screening_id])
}

model Departments {
  id     Int      @id @default(autoincrement())
  title  String   @unique @db.VarChar(250)
  status Boolean? @default(true) @db.Boolean
  Job    Job[]
}

model Evaluation {
  id           Int              @id @default(autoincrement())
  school_year  String           @db.VarChar(100)
  semester     Int
  status       EvaluationStatus @default(NOT_SET)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  questionList Question[]

  @@unique([school_year, semester])
}

model Question {
  id           Int         @id @default(autoincrement())
  question     String
  Evaluation   Evaluation? @relation(fields: [evaluationId], references: [id], onDelete: Cascade)
  evaluationId Int
}

model Comments {
  id          Int    @id @default(autoincrement())
  description String
}

model Applicant {
  id                   Int                    @id @default(autoincrement())
  jobApply             Job                    @relation(fields: [jobId], references: [id])
  jobId                Int
  status               ApplicationStatus      @default(PENDING)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  information ApplicantInformation[]
}

model ApplicantInformation {
  id             Int    @id @default(autoincrement())
  first_name     String @db.VarChar(100)
  middle_name    String @db.VarChar(100)
  last_name      String @db.VarChar(100)
  email          String @db.VarChar(100)
  contact_number Int
  resume_path    String

  gender               String? @db.VarChar(100)
  age                  Int?
  civil_status         String? @db.VarChar(100)
  date_of_birth        String? @db.VarChar(100)
  city_address         String?
  provincial_address   String?
  telephone_number     Int?
  religion             String?
  citizenship          String?
  fathers_name         String?
  fathers_occupation   String?
  mothers_name         String?
  mothers_occupation   String?
  parents_address      String?
  person_to_be_contact String?

  //educational background
  elementary String?

  elementary_years_attended String?

  highschool                String?
  highschool_years_attended String?
  college                   String?
  college_years_attended    String?

  //employment record
  Applicant   Applicant @relation(fields: [applicantId], references: [id])
  // Applicant Applicant[]
  applicantId Int
}
