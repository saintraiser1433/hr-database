// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//ENUMS
enum ApplicationStatus {
  PENDING
  ONGOING
  PASSED
  REJECTED
  FAILED
}

enum EvaluationStatus {
  NOT_SET
  ONGOING
  FINISHED
}

enum ScreeningStatus {
  PENDING
  PASSED
  FAILED
}

enum RoleStatus {
  Admin
  Employee
  TeamLead
}

enum RequirementStatus {
  PENDING
  SUBMITTED
  EXPIRED
}

enum CommentType {
  TeamLead
  Employee
}

//END OF ENUMS
model User {
  id           String   @id @default(cuid())
  first_name   String   @db.VarChar(100)
  last_name    String   @db.VarChar(100)
  middle_name  String   @db.VarChar(100)
  email        String?  @unique @db.VarChar(100)
  username     String   @unique @db.VarChar(100)
  password     String   @db.VarChar(100)
  accessToken  String?
  refreshToken String?
  role         String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Requirements {
  id          Int      @id @default(autoincrement())
  title       String   @unique @db.VarChar(100)
  status      Boolean? @default(true) @db.Boolean
  description String

  Job                  Job?                   @relation(fields: [jobId], references: [id])
  jobId                Int?
  employeeRequirements EmployeeRequirements[]
}

model Job {
  id             Int            @id @default(autoincrement())
  title          String         @unique @db.VarChar(250)
  description    String
  totalAvailable Int            @db.Integer
  departmentsId  Int
  department     Departments    @relation(fields: [departmentsId], references: [id])
  status         Boolean?       @default(true) @db.Boolean
  headerImage    String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  JobScreening   JobScreening[]
  Applicants     Applicant[]
  requirements   Requirements[]
  Employees      Employees[]
}

model Screening {
  id                       Int                        @id @default(autoincrement())
  title                    String                     @unique @db.VarChar(250)
  description              String
  status                   Boolean?                   @default(true) @db.Boolean
  JobScreening             JobScreening[]
  applicantScreeningResult ApplicantScreeningResult[]
}

model JobScreening {
  id              Int       @id @default(autoincrement())
  jobList         Job       @relation(fields: [job_id], references: [id], onDelete: Cascade)
  job_id          Int
  screeningList   Screening @relation(fields: [screening_id], references: [id])
  screening_id    Int
  sequence_number Int
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@unique([job_id, screening_id])
}

model Departments {
  id        Int         @id @default(autoincrement())
  title     String      @unique @db.VarChar(250)
  status    Boolean?    @default(true) @db.Boolean
  Job       Job[]
  Employees Employees[]
}

model Employees {
  id                       Int                          @id @default(autoincrement())
  status                   Boolean                      @default(true)
  job                      Job?                         @relation(fields: [jobId], references: [id])
  department               Departments?                 @relation(fields: [departmentId], references: [id])
  information              ApplicantInformation?        @relation(fields: [informationId], references: [id])
  username                 String                       @db.VarChar(100)
  password                 String                       @db.VarChar(100)
  informationId            Int?
  jobId                    Int?
  departmentId             Int?
  accessToken              String?
  refreshToken             String?
  role                     RoleStatus                   @default(Employee)
  createdAt                DateTime                     @default(now())
  updatedAt                DateTime                     @updatedAt
  employeeRequirements     EmployeeRequirements[]
  assignTaskCriteria       TeamLeadAssignTaskCriteria[]
  teamLeadEvaluationResult TeamLeadEvaluationResult[]
  teamLeadEvaluationHeader TeamLeadEvaluationHeader?
  evaluatedComments  Comments[] @relation(name: "EvaluatedEmployee")
  commenterComments  Comments[] @relation(name: "CommenterComments")

  @@unique([username])
}

model EmployeeRequirements {
  id             Int               @id @default(autoincrement())
  employee       Employees         @relation(fields: [employeeId], references: [id])
  employeeId     Int
  requirements   Requirements      @relation(fields: [requirementsId], references: [id])
  requirementsId Int
  submittedAt    DateTime?
  expiryDate     DateTime?
  status         RequirementStatus @default(PENDING)
}

model Applicant {
  id          Int                  @id @default(autoincrement())
  jobApply    Job                  @relation(fields: [jobId], references: [id])
  jobId       Int
  status      ApplicationStatus    @default(PENDING)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  rejectedAt  DateTime?
  approvedAt  DateTime?
  failedAt    DateTime?
  information ApplicantInformation @relation(fields: [informationId], references: [id])

  informationId            Int // Foreign key to ApplicantInformation
  applicantScreeningResult ApplicantScreeningResult[]
}

model ApplicantScreeningResult {
  id              Int             @id @default(autoincrement())
  dateInterview   DateTime?
  screening       Screening       @relation(fields: [screeningId], references: [id])
  Applicant       Applicant?      @relation(fields: [applicantId], references: [id])
  applicantId     Int
  screeningId     Int
  status          ScreeningStatus
  sequence_number Int
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model ApplicantInformation {
  //main
  id                Int       @id @default(autoincrement())
  first_name        String    @db.VarChar(100)
  middle_name       String    @db.VarChar(100)
  last_name         String    @db.VarChar(100)
  gender            String?   @db.VarChar(100)
  date_of_birth     DateTime?
  email             String    @db.VarChar(100)
  contact_number    String    @db.VarChar(100)
  telephone_number  String?
  permanent_address String?
  current_address   String?
  religion          String?
  citizenship       String?
  language_spoken   String?
  civil_status      String?   @db.VarChar(100)
  nickname          String?   @db.VarChar(100)
  resume_path       String
  photo_path        String

  //family background
  fathers_name         String?
  fathers_occupation   String?
  mothers_name         String?
  mothers_occupation   String?
  parents_address      String?
  person_to_be_contact String?

  education      EducationBackground[]
  workExperience WorkExperience[]
  skills         SkillsExpertise[]
  references     References[]
  Applicant      Applicant[]
  Employees      Employees[]
}

model EducationBackground {
  id                     Int                   @id @default(autoincrement())
  school_name            String?
  degree                 String?
  year_started           String?
  year_ended             String?
  description            String?
  ApplicantInformation   ApplicantInformation? @relation(fields: [applicantInformationId], references: [id])
  applicantInformationId Int?

  @@unique([applicantInformationId, school_name])
}

model WorkExperience {
  id                     Int                   @id @default(autoincrement())
  company_name           String?
  job_title              String?
  work_year_started      String?
  work_year_ended        String?
  ApplicantInformation   ApplicantInformation? @relation(fields: [applicantInformationId], references: [id])
  applicantInformationId Int?

  @@unique([applicantInformationId, company_name])
}

model SkillsExpertise {
  id                     Int                   @id @default(autoincrement())
  skills_name            String?
  ApplicantInformation   ApplicantInformation? @relation(fields: [applicantInformationId], references: [id])
  applicantInformationId Int?

  @@unique([applicantInformationId, skills_name])
}

model References {
  id                     Int                   @id @default(autoincrement())
  name_of_person         String?
  position               String?
  ref_contact_number     String?
  ApplicantInformation   ApplicantInformation? @relation(fields: [applicantInformationId], references: [id])
  applicantInformationId Int?

  @@unique([applicantInformationId, name_of_person])
}

model Evaluation {
  id                       Int                        @id @default(autoincrement())
  school_year              String                     @db.VarChar(100)
  semester                 Int
  status                   EvaluationStatus           @default(NOT_SET)
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  Peer                     Peer[]
  TeamLeadEvaluation       TeamLeadEvaluation[]
  teamLeadEvaluationResult TeamLeadEvaluationResult[]
  Comments                 Comments[]

  @@unique([school_year, semester])
}

model Peer {
  id               Int             @id @default(autoincrement())
  name             String          @unique
  evaluation       Evaluation?     @relation(fields: [evaluationId], references: [id], onDelete: Cascade)
  evaluationId     Int
  question         Question[]
  template         TemplateHeader? @relation(fields: [templateHeaderId], references: [id])
  templateHeaderId Int?
  percentage       Decimal         @db.Decimal(10, 2)
}

model Comments {
  id           Int         @id @default(autoincrement())
  evaluation   Evaluation  @relation(fields: [evaluationId], references: [id])
  evaluationId Int
  employee     Employees   @relation(name: "EvaluatedEmployee", fields: [employeesId], references: [id])
  employeesId  Int
  commentType  CommentType
  commenter    Employees   @relation(name: "CommenterComments", fields: [commenterId], references: [id])
  commenterId  Int
  description  String
}

model TeamLeadEvaluation {
  id                       Int                          @id @default(autoincrement())
  name                     String                       @unique
  percentage               Decimal                      @db.Decimal(10, 2)
  evaluation               Evaluation?                  @relation(fields: [evaluationId], references: [id], onDelete: Cascade)
  evaluationId             Int
  template                 TemplateHeader?              @relation(fields: [templateHeaderId], references: [id])
  templateHeaderId         Int?
  teamLeadCriteria         TeamLeadCriteria[]
  forTeamLead              Boolean                      @default(false)
  assignTaskCriteria       TeamLeadAssignTaskCriteria[]
  TeamLeadEvaluationHeader TeamLeadEvaluationHeader[]
  TeamLeadEvaluationResult TeamLeadEvaluationResult[]
}

model TeamLeadAssignTaskCriteria {
  id                   Int                @id @default(autoincrement())
  teamLead             TeamLeadEvaluation @relation(fields: [teamLeadEvaluationId], references: [id])
  employee             Employees          @relation(fields: [employeesId], references: [id])
  employeesId          Int
  teamLeadEvaluationId Int
  name                 String
  question             Question[]
}

model TeamLeadEvaluationHeader {
  id                   Int                @id @default(autoincrement())
  teamLeadEvaluation   TeamLeadEvaluation @relation(fields: [teamLeadEvaluationId], references: [id])
  teamLeadEvaluationId Int
  employee             Employees          @relation(fields: [employeeId], references: [id])
  employeeId           Int                @unique
  status               Boolean            @default(false) // "Not evaluate yet" | "Evaluated"
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
}

model TeamLeadEvaluationResult {
  id                   Int                @id @default(autoincrement()) // Add a unique ID for easier management
  evaluation           Evaluation         @relation(fields: [evaluationId], references: [id])
  evaluationId         Int
  teamLeadEvaluation   TeamLeadEvaluation @relation(fields: [teamLeadEvaluationId], references: [id])
  teamLeadEvaluationId Int
  question             Question           @relation(fields: [questionId], references: [id])
  questionId           Int
  employee             Employees          @relation(fields: [employeesId], references: [id])
  employeesId          Int
  templateDetail       TemplateDetail     @relation(fields: [templateDetailId], references: [id])
  templateDetailId     Int

  @@unique([evaluationId, questionId,teamLeadEvaluationId, employeesId, templateDetailId])
}

model TeamLeadCriteria {
  id                   Int                @id @default(autoincrement())
  name                 String
  teamLeadEvaluation   TeamLeadEvaluation @relation(fields: [teamLeadEvaluationId], references: [id])
  question             Question[]
  teamLeadEvaluationId Int
}

model Question {
  id                       Int                         @id @default(autoincrement())
  question                 String
  peer                     Peer?                       @relation(fields: [peerId], references: [id], onDelete: Cascade)
  peerId                   Int?
  teamLeadCriteria         TeamLeadCriteria?           @relation(fields: [teamLeadCriteriaId], references: [id], onDelete: Cascade)
  teamLeadCriteriaId       Int?
  assignTaskCriteria       TeamLeadAssignTaskCriteria? @relation(fields: [assignTaskCriteriaId], references: [id])
  assignTaskCriteriaId     Int?
  teamLeadEvaluationResult TeamLeadEvaluationResult[]
}

model TemplateHeader {
  id                 Int                  @id @default(autoincrement())
  template_name      String               @db.VarChar(100)
  description        String
  templateDetail     TemplateDetail[]
  Peer               Peer[]
  TeamLeadEvaluation TeamLeadEvaluation[]
}

model TemplateDetail {
  id                       Int                        @id @default(autoincrement())
  title                    String                     @db.VarChar(100)
  description              String
  score                    Int
  template                 TemplateHeader             @relation(fields: [templateId], references: [id])
  templateId               Int
  teamLeadEvaluationResult TeamLeadEvaluationResult[]
}
